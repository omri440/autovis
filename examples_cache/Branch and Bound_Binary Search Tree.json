{
  "name": "Binary Search Tree",
  "path": "Branch and Bound/Binary Search Tree/search.js",
  "code": "// import visualization libraries {\nconst { Tracer, GraphTracer, LogTracer, Randomize, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst G = [ // G[i][j] indicates whether the path from the i-th node to the j-th node exists or not\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n];\n\nconst T = [ // mapping to G as a binary tree , [i][0] indicates left child, [i][1] indicates right child\n  [-1, -1],\n  [0, 2],\n  [-1, -1],\n  [1, 4],\n  [-1, -1],\n  [3, 8],\n  [-1, 7],\n  [-1, -1],\n  [6, 10],\n  [-1, -1],\n  [9, -1],\n];\n\nconst key = Randomize.Integer({ min: 0, max: G.length - 1 }); // item to be searched\n// define tracer variables {\nconst tracer = new GraphTracer(' Binary Search Tree ');\nconst logger = new LogTracer(' Log ');\nLayout.setRoot(new VerticalLayout([tracer, logger]));\ntracer.set(G);\ntracer.layoutTree(5);\ntracer.log(logger);\nTracer.delay();\n// }\n\nfunction bst(item, node, parent) { // node = current node , parent = previous node\n  // visualize {\n  tracer.visit(node, parent);\n  Tracer.delay();\n  // }\n  if (item === node) { // key found\n    // logger {\n    logger.println(' Match Found ');\n    // }\n  } else if (item < node) { // key less than value of current node\n    if (T[node][0] === -1) {\n      // logger {\n      logger.println(' Not Found ');\n      // }\n    } else {\n      bst(item, T[node][0], node);\n    }\n  } else { // key greater than value of current node\n    if (T[node][1] === -1) {\n      // logger {\n      logger.println(' Not Found ');\n      // }\n    } else {\n      bst(item, T[node][1], node);\n    }\n  }\n}\n\n// logger {\nlogger.println(`Finding number ${key}`);\n// }\nbst(key, 5); // node with key 5 is the root\n",
  "category": "searching",
  "patterns": [
    "uses_randomize",
    "has_logging"
  ]
}