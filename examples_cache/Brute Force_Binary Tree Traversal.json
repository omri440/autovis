{
  "name": "Binary Tree Traversal",
  "path": "Brute Force/Binary Tree Traversal/preOrder.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, GraphTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst G = [ // G[i][j] indicates whether the path from the i-th node to the j-th node exists or not\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n];\n\nconst T = [ // mapping to G as a binary tree , [i][0] indicates left child, [i][1] indicates right child\n  [-1, -1],\n  [0, 2],\n  [-1, -1],\n  [1, 4],\n  [-1, -1],\n  [3, 8],\n  [-1, 7],\n  [-1, -1],\n  [6, 10],\n  [-1, -1],\n  [9, -1],\n];\n\n// define tracer variables {\nconst treeTracer = new GraphTracer('Traversal Pre-order');\nconst arrayTracer = new Array1DTracer('Print Pre-order');\nconst logger = new LogTracer('Log');\nLayout.setRoot(new VerticalLayout([treeTracer, arrayTracer, logger]));\ntreeTracer.set(G);\ntreeTracer.layoutTree(5);\narrayTracer.set(new Array(T.length).fill('-'));\nTracer.delay();\n// }\n\nlet index = 0;\n\nfunction preOrder(root, parent) {\n  if (root === -1) {\n    // logger {\n    logger.println('No more nodes. Backtracking.');\n    Tracer.delay();\n    // }\n    return;\n  }\n\n  // visualize {\n  logger.println(`Reached ${root}`);\n  treeTracer.visit(root, parent);\n  Tracer.delay();\n\n  logger.println(`Printing ${root}`);\n  treeTracer.leave(root);\n  arrayTracer.patch(index++, root);\n  Tracer.delay();\n\n  logger.println(` Going left from ${root}`);\n  Tracer.delay();\n  // }\n  preOrder(T[root][0], root);\n\n  // logger {\n  logger.println(` Going right from ${root}`);\n  Tracer.delay();\n  // }\n  preOrder(T[root][1], root);\n}\n\npreOrder(5); // node with key 5 is the root\n// logger {\nlogger.println('Finished');\n// }\n",
  "category": "graph",
  "patterns": [
    "custom_data",
    "has_logging"
  ]
}