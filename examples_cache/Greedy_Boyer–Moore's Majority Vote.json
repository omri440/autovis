{
  "name": "Boyer\u2013Moore's Majority Vote",
  "path": "Greedy/Boyer\u2013Moore's Majority Vote/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst A = [1, 3, 3, 2, 1, 1, 1];\nconst N = A.length;\n\n// define tracer variables {\nconst tracer = new Array1DTracer('List of element');\nconst logger = new LogTracer('Console');\nLayout.setRoot(new VerticalLayout([tracer, logger]));\ntracer.set(A);\nTracer.delay();\n// }\n\nfunction isMajorityElement(element) {\n  let count = 0;\n  // logger {\n  logger.println(`Verify majority element ${element}`);\n  // }\n  for (let i = N - 1; i >= 0; i--) {\n    // visualize {\n    tracer.patch(i, A[i]);\n    Tracer.delay();\n    // }\n    if (A[i] === element) {\n      count++;\n    } else {\n      // visualize {\n      tracer.depatch(i);\n      // }\n    }\n  }\n  // logger {\n  logger.println(`Count of our assumed majority element ${count}`);\n  // }\n  if (count > Math.floor(N / 2)) {\n    // logger {\n    logger.println('Our assumption was correct!');\n    // }\n    return true;\n  }\n  // logger {\n  logger.println('Our assumption was incorrect!');\n  // }\n  return false;\n}\n\nfunction findProbableElement() {\n  let index = 0;\n  let count = 1;\n  // visualize {\n  tracer.select(index);\n  Tracer.delay();\n  // }\n  // logger {\n  logger.println(`Beginning with assumed majority element : ${A[index]} count : ${count}`);\n  logger.println('--------------------------------------------------------');\n  // }\n  for (let i = 1; i < N; i++) {\n    // visualize {\n    tracer.patch(i, A[i]);\n    Tracer.delay();\n    // }\n    if (A[index] === A[i]) {\n      count++;\n      // logger {\n      logger.println(`Same as assumed majority element! Count : ${count}`);\n      // }\n    } else {\n      count--;\n      // logger {\n      logger.println(`Not same as assumed majority element! Count : ${count}`);\n      // }\n    }\n\n    if (count === 0) {\n      // logger {\n      logger.println('Wrong assumption in majority element');\n      // }\n      // visualize {\n      tracer.deselect(index);\n      tracer.depatch(i);\n      // }\n      index = i;\n      count = 1;\n      // visualize {\n      tracer.select(i);\n      Tracer.delay();\n      // }\n      // logger {\n      logger.println(`New assumed majority element!${A[i]} Count : ${count}`);\n      logger.println('--------------------------------------------------------');\n      // }\n    } else {\n      // visualize {\n      tracer.depatch(i);\n      // }\n    }\n  }\n  // logger {\n  logger.println(`Finally assumed majority element ${A[index]}`);\n  logger.println('--------------------------------------------------------');\n  // }\n  return A[index];\n}\n\nfunction findMajorityElement() {\n  const element = findProbableElement();\n  // logger {\n  if (isMajorityElement(element) === true) {\n    logger.println(`Majority element is ${element}`);\n  } else {\n    logger.println('No majority element');\n  }\n  // }\n}\n\nfindMajorityElement();\n",
  "category": "greedy",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "custom_data",
    "has_logging"
  ]
}