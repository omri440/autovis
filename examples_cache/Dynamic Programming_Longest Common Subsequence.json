{
  "name": "Longest Common Subsequence",
  "path": "Dynamic Programming/Longest Common Subsequence/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, Array2DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst string1 = 'AGGTAB';\nconst string2 = 'GXTXAYB';\nconst m = string1.length;\nconst n = string2.length;\nconst A = new Array(m + 1);\nfor (let i = 0; i < m + 1; i++) {\n  A[i] = new Array(n + 1);\n}\n\n// define tracer variables {\nconst tracer1 = new Array1DTracer('String 1');\nconst tracer2 = new Array1DTracer('String 2');\nconst tracer3 = new Array2DTracer('Memo Table');\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([tracer1, tracer2, tracer3, logger]));\ntracer1.set(string1);\ntracer2.set(string2);\ntracer3.set(A);\nTracer.delay();\n// }\n\nlet i;\nlet j;\n\n// Build the memo table in bottom up fashion\nfor (i = 0; i <= m; i++) {\n  for (j = 0; j <= n; j++) {\n    if (i === 0 || j === 0) {\n      A[i][j] = 0;\n    } else if (string1[i - 1] === string2[j - 1]) {\n      // visualize {\n      tracer1.select(i - 1);\n      Tracer.delay();\n      tracer2.select(j - 1);\n      Tracer.delay();\n      tracer3.select(i - 1, j - 1);\n      Tracer.delay();\n      // }\n\n      A[i][j] = A[i - 1][j - 1] + 1;\n\n      // visualize {\n      tracer1.deselect(i - 1);\n      tracer2.deselect(j - 1);\n      tracer3.deselect(i - 1, j - 1);\n      // }\n    } else {\n      // visualize {\n      tracer3.select(i - 1, j);\n      Tracer.delay();\n      tracer3.select(i, j - 1);\n      Tracer.delay();\n      // }\n\n      if (A[i - 1][j] > A[i][j - 1]) {\n        A[i][j] = A[i - 1][j];\n      } else {\n        A[i][j] = A[i][j - 1];\n      }\n\n      // visualize {\n      tracer3.deselect(i - 1, j);\n      tracer3.deselect(i, j - 1);\n      // }\n    }\n    // visualize {\n    tracer3.patch(i, j, A[i][j]);\n    Tracer.delay();\n    tracer3.depatch(i, j);\n    // }\n  }\n}\n\nlet finalString = '';\ni = m;\nj = n;\nwhile (i >= 1 && j >= 1) {\n  // visualize {\n  tracer3.select(i, j);\n  Tracer.delay();\n  // }\n  if (string1[i - 1] === string2[j - 1]) {\n    // visualize {\n    tracer1.select(i - 1);\n    Tracer.delay();\n    tracer2.select(j - 1);\n    Tracer.delay();\n    // }\n\n    finalString = string1[i - 1] + finalString;\n    i--;\n    j--;\n  } else if (A[i - 1][j] > A[i][j - 1]) {\n    i--;\n  } else {\n    j--;\n  }\n}\n\n// logger {\nlogger.println(`Longest Common Subsequence Length is ${A[m][n]}`);\nlogger.println(`Longest Common Subsequence is ${finalString}`);\n// }\n",
  "category": "dynamic_programming",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "has_logging",
    "uses_2d_array"
  ]
}