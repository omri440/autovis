{
  "name": "Heapsort",
  "path": "Brute Force/Heapsort/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, ChartTracer, LogTracer, Randomize, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n// define tracer variables {\nconst chart = new ChartTracer();\nconst tracer = new Array1DTracer();\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([chart, tracer, logger]));\nconst D = Randomize.Array1D({ N: 10 });\ntracer.set(D);\ntracer.chart(chart);\nTracer.delay();\n// }\n\n// logger {\nlogger.println(`Original array = [${D.join(', ')}]`);\n// }\n\nfunction heapSort(array, size) {\n  let i;\n  let j;\n  let temp;\n\n  for (i = Math.floor(size / 2) - 1; i >= 0; i--) {\n    heapify(array, size, i);\n  }\n\n  for (j = size - 1; j >= 0; j--) {\n    temp = array[0];\n    array[0] = array[j];\n    array[j] = temp;\n\n    // visualize {\n    tracer.patch(0, array[0]);\n    tracer.patch(j, array[j]);\n    logger.println(`Swapping elements : ${array[0]} & ${array[j]}`);\n    Tracer.delay();\n    tracer.depatch(0);\n    tracer.depatch(j);\n    tracer.select(j);\n    Tracer.delay();\n    // }\n\n    heapify(array, j, 0);\n\n    // visualize {\n    tracer.deselect(j);\n    // }\n  }\n}\n\nfunction heapify(array, size, root) {\n  let largest = root;\n  const left = 2 * root + 1;\n  const right = 2 * root + 2;\n  let temp;\n\n  if (left < size && array[left] > array[largest]) {\n    largest = left;\n  }\n\n  if (right < size && array[right] > array[largest]) {\n    largest = right;\n  }\n\n  if (largest !== root) {\n    temp = array[root];\n    array[root] = array[largest];\n    array[largest] = temp;\n\n    // visualize {\n    tracer.patch(root, array[root]);\n    tracer.patch(largest, array[largest]);\n    logger.println(`Swapping elements : ${array[root]} & ${array[largest]}`);\n    Tracer.delay();\n    tracer.depatch(root);\n    tracer.depatch(largest);\n    // }\n\n    heapify(array, size, largest);\n  }\n}\n\nheapSort(D, D.length);\n\n// logger {\nlogger.println(`Final array = [${D.join(', ')}]`);\n// }\n",
  "category": "sorting",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "uses_randomize",
    "has_logging",
    "uses_chart"
  ]
}