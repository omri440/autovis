{
  "name": "Knuth-Morris-Pratt's String Search",
  "path": "Dynamic Programming/Knuth-Morris-Pratt's String Search/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, Array2DTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\nconst string = \"AAAABAABAAAABAAABAAAA\";\nconst pattern = \"AAAABAAA\";\n\nlet _next = Array(...Array(pattern.length)).map(Number.prototype.valueOf, 0);\n// define tracer variables {\nconst pattern_tracer = new Array2DTracer('Pattern');\nconst string_tracer = new Array1DTracer('String');\nLayout.setRoot(new VerticalLayout([pattern_tracer, string_tracer]));\npattern_tracer.set([_next, pattern, pattern]);\nstring_tracer.set(string); Tracer.delay();\n// }\n\nfunction get_next(pattern)\n{\n    let q = 1; // postfix pointer\n    let k = 0; // prefix pointer\n    // visualize {\n    pattern_tracer.select(2, k);\n    // }\n    for (; q < pattern.length; ++q)\n    {\n        // visualize {\n        pattern_tracer.select(1, q); Tracer.delay();\n        // }\n        while ((k > 0) && (pattern[q] !== pattern[k]))\n        {\n            // visualize {\n            pattern_tracer.select(0, k - 1); Tracer.delay();\n            pattern_tracer.deselect(2, k);\n            pattern_tracer.select(2, _next[k - 1]); Tracer.delay();\n            pattern_tracer.deselect(0, k - 1);\n            // }\n            k = _next[k - 1];\n        }\n        if (pattern[q] === pattern[k])\n        {\n            // visualize {\n            pattern_tracer.deselect(2, k);\n            pattern_tracer.select(2, k + 1); Tracer.delay();\n            // }\n            ++k;\n        }\n        // visualize {\n        pattern_tracer.patch(0, q, k); Tracer.delay();\n        pattern_tracer.depatch(0, q); Tracer.delay();\n        pattern_tracer.deselect(1, q);\n        // }\n        _next[q] = k;\n    }\n    // visualize {\n    pattern_tracer.deselect(2, k);\n    pattern_tracer.set([_next, pattern]); Tracer.delay();\n    // }\n}\n\nfunction KMP(string, pattern)\n{\n    const match_positions = [];\n    let match_start_position;\n\n    let i = 0; // string pointer\n    let k = 0; // pattern pointer\n    get_next(pattern);\n    for (; i < string.length; i++)\n    {\n        // visualize {\n        string_tracer.select(i);\n        pattern_tracer.select(1, k); Tracer.delay();\n        // }\n        while ((k > 0) && (string[i] != pattern[k]))\n        {\n            // visualize {\n            pattern_tracer.select(0, k - 1); Tracer.delay();\n            pattern_tracer.deselect(1, k);\n            pattern_tracer.select(1, _next[k - 1]); Tracer.delay();\n            pattern_tracer.deselect(0, k - 1);\n            // }\n            k = _next[k - 1];\n        }\n        if (string[i] === pattern[k])\n        {\n            ++k;\n            if (k === pattern.length)\n            {\n                match_start_position = i - pattern.length + 1;\n                match_positions.push(match_start_position);\n                // visualize {\n                string_tracer.select(match_start_position, match_start_position + pattern.length - 1); Tracer.delay();\n                string_tracer.deselect(match_start_position, match_start_position + pattern.length - 1); Tracer.delay();\n                pattern_tracer.select(0, k - 1); Tracer.delay();\n                pattern_tracer.deselect(1, k - 1);\n                pattern_tracer.select(1, _next[k - 1]); Tracer.delay();\n                pattern_tracer.deselect(0, k - 1);\n                // }\n                k = _next[k - 1];\n            }\n            else\n            {\n                // visualize {\n                pattern_tracer.deselect(1, k - 1);\n                pattern_tracer.select(1, k); Tracer.delay();\n                // }\n            }\n        }\n        else\n        {\n            // visualize {\n            pattern_tracer.select(0, k); Tracer.delay();\n            // }\n        }\n        // visualize {\n        pattern_tracer.deselect(0, k);\n        pattern_tracer.deselect(1, k);\n        string_tracer.deselect(i);\n        // }\n    }\n    // visualize {\n    for (let j = 0; j < match_positions.length; j++)\n    {\n        string_tracer.select(match_positions[j], match_positions[j] + pattern.length - 1); Tracer.delay();\n        string_tracer.deselect(match_positions[j], match_positions[j] + pattern.length - 1);\n    }\n    // }\n}\n\nKMP(string, pattern);\n",
  "category": "searching",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "custom_data",
    "uses_2d_array"
  ]
}