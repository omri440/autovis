{
  "name": "Pascal's Triangle",
  "path": "Dynamic Programming/Pascal's Triangle/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array2DTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst N = 9;\nconst A = new Array(N);\nfor (let i = N - 1; i >= 0; i--) {\n  A[i] = new Array(N);\n}\n\n// define tracer variables {\nconst tracer = new Array2DTracer('Pascal\\'s Triangle');\nLayout.setRoot(new VerticalLayout([tracer]));\ntracer.set(A);\nTracer.delay();\n// }\n\nfor (let i = 0; i < N; i++) {\n  for (let j = 0; j <= i; j++) {\n    if (j === i || j === 0) { // First and last values in every row are 1\n      A[i][j] = 1;\n\n      // visualize {\n      tracer.patch(i, j, A[i][j]);\n      Tracer.delay();\n      tracer.depatch(i, j);\n      // }\n    } else { // Other values are sum of values just above and left of above\n      // visualize {\n      tracer.select(i - 1, j - 1);\n      Tracer.delay();\n      tracer.select(i - 1, j);\n      Tracer.delay();\n      // }\n\n      A[i][j] = A[i - 1][j - 1] + A[i - 1][j];\n\n      // visualize {\n      tracer.patch(i, j, A[i][j]);\n      Tracer.delay();\n      tracer.depatch(i, j);\n      tracer.deselect(i - 1, j - 1);\n      tracer.deselect(i - 1, j);\n      // }\n    }\n  }\n}\n",
  "category": "dynamic_programming",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "uses_2d_array"
  ]
}