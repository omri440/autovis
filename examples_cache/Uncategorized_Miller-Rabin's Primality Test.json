{
  "name": "Miller-Rabin's Primality Test",
  "path": "Uncategorized/Miller-Rabin's Primality Test/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n// define tracer variables {\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([logger]));\nTracer.delay();\n// }\n\nfor (let i = 0; i < 3; i++) {\n  let a = Math.floor(Math.random() * 300);\n  if (a % 2 === 0) a += 1;\n  testProbablyPrime(a);\n  // visualize {\n  logger.println('----------');\n  // }\n}\n\ntestProbablyPrime(151);\n// visualize {\nlogger.println('----------');\n// }\n\ntestProbablyPrime(199, 10);\n\n// Utility function to do modular exponentiation.\n// It returns (x^y) % p\nfunction power(x, y, p) {\n  let res = 1;\n  x %= p;\n  while (y > 0) {\n    // If y is odd, multiply x with result\n    if (y & 1) res = (res * x) % p;\n    // y must be even now\n    y >>= 1; // y = y/2\n    x = (x * x) % p;\n  }\n  return res;\n}\n\n\n/**\n * Determine if N is prime using Miller-Rabin probabilistic algorithm\n * @param  {Number} n The number\n * @param  {Number} k An integer that determine the accuracy of the solution\n * @return {Boolean}\n */\nfunction testProbablyPrime(n, k = 5) {\n  // visualize {\n  logger.println(`==> Testing number ${n}`);\n  // }\n\n  if (n === 1 || n === 3) {\n    // visualize {\n    logger.println('==> Simple case, N is 1 or 3');\n    // }\n    return true;\n  }\n  if (n % 2 === 0) {\n    // visualize {\n    logger.println(`==> Simple case, ${n} mod 2 = 0`);\n    // }\n    return false;\n  }\n\n  // Write (n - 1) as 2^s * d\n  let d = n - 1;\n  while (d % 2 === 0) {\n    d /= 2;\n  }\n  // visualize {\n  logger.println(`d = ${d}`);\n  // }\n\n  const P = 100 * (1 - (1 / Math.pow(4, k)));\n\n  WitnessLoop: do {\n    // visualize {\n    logger.println(`Remaining iterations: #${k}`);\n    // }\n\n    const a = 2 + Math.floor(Math.random() * (n - 4));\n    // visualize {\n    logger.println(`--> first test with random = ${a}`);\n    // }\n\n    // Compute a^d % n\n    let x = power(a, d, n);\n\n    if (x === 1 || x === n - 1) {\n      // visualize {\n      logger.println('--> continue WitnessLoop, x = 1 or x = n-1');\n      // }\n      continue;\n    }\n\n    // visualize {\n    logger.println('--> second test');\n    // }\n\n    // Keep squaring x while one of the following doesn't\n    // happen\n    // (i)   d does not reach n-1\n    // (ii)  (x^2) % n is not 1\n    // (iii) (x^2) % n is not n-1\n    let i = d;\n    while (i !== n - 1) {\n      x = (x * x) % n;\n      i *= 2;\n\n      if (x === 1) {\n        // visualize {\n        logger.println(`--> exiting, ${n} is composite`);\n        // }\n        return false;\n      }\n\n      if (x === n - 1) {\n        // visualize {\n        logger.println('--> continue WitnessLoop');\n        // }\n        continue WitnessLoop;\n      }\n    }\n\n    // visualize {\n    logger.println(`--> exiting, ${n} is composite 'cause (n-1) is reached`);\n    // }\n    return false;\n  } while (--k);\n\n  // visualize {\n  logger.println(`End of tests, ${n} is probably prime with probabilty of ${P}%`);\n  // }\n  return true;\n}\n",
  "category": "other",
  "patterns": [
    "has_logging"
  ]
}