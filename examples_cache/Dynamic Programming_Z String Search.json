{
  "name": "Z String Search",
  "path": "Dynamic Programming/Z String Search/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n// let pattern = \"aab\";\n// let text = \"aabxaabxcaabxaabxay\";\nconst pattern = 'abc';\nconst text = 'xabcabzabc';\n\nconst len = pattern.length + text.length + 1;\n\nconst z = new Array(len);\nz[0] = 0;\n\n// define tracer variables {\nconst textTracer = new Array1DTracer('text');\nconst pattTracer = new Array1DTracer('pattern');\nconst concatTracer = new Array1DTracer('concatenated string');\nconst tracer = new Array1DTracer('zArray');\npattTracer.set(pattern);\ntextTracer.set(text);\ntracer.set(z);\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([textTracer, pattTracer, concatTracer, tracer, logger]));\nTracer.delay();\n// }\n\nfunction createZarr(concat) {\n  let left;\n  let right;\n  let N;\n  N = concat.length;\n  left = 0;\n  right = 0;\n  for (let i = 1; i < N; i++) {\n    // visualize {\n    tracer.select(i);\n    Tracer.delay();\n    // }\n    if (i > right) {\n      left = right = i;\n      while (right < N && concat[right] === concat[right - left]) {\n        // visualize {\n        concatTracer.patch(right);\n        concatTracer.select(right - left);\n        logger.println(`${concat[right]} (at index ${right}) is equal to ${concat[right - left]} (at index ${right - left})`);\n        Tracer.delay();\n        concatTracer.depatch(right);\n        concatTracer.deselect(right - left);\n        // }\n        right++;\n      }\n      // visualize {\n      if (right < N) {\n        concatTracer.patch(right);\n        concatTracer.select(right - left);\n        logger.println(`${concat[right]} (at index ${right}) is NOT equal to ${concat[right - left]} (at index ${right - left})`);\n        Tracer.delay();\n        concatTracer.depatch(right);\n        concatTracer.deselect(right - left);\n      }\n      // }\n      z[i] = (right - left);\n      // logger {\n      logger.println('--------------------------------');\n      logger.println(`Value of z[${i}] = the length of the substring starting from ${i} which is also the prefix of the concatinated string(=${right - left})`);\n      logger.println('--------------------------------');\n      // }\n      right--;\n    } else if (z[i - left] < (right - i + 1)) {\n      // visualize {\n      logger.println(`The substring from index ${i - left} will not cross the right end.`);\n      concatTracer.patch(right - i + 1);\n      concatTracer.select(i - left);\n      Tracer.delay();\n      // }\n      z[i] = z[i - left];\n      // visualize {\n      concatTracer.depatch(right - i + 1);\n      concatTracer.deselect(i - left);\n      // }\n    } else {\n      // logger {\n      logger.println(`The substring from index ${i - left} will cross the right end.`);\n      // }\n      left = i;\n      while (right < N && concat[right] === concat[right - left]) {\n        // visualize {\n        concatTracer.patch(right);\n        concatTracer.select(right - left);\n        logger.println(`${concat[right]} (at index ${right}) is equal to ${concat[right - left]} (at index ${right - left})`);\n        Tracer.delay();\n        concatTracer.depatch(right);\n        concatTracer.deselect(right - left);\n        // }\n        right++;\n      }\n      // visualize {\n      if (right < N) {\n        concatTracer.patch(right);\n        concatTracer.select(right - left);\n        logger.println(`${concat[right]} (at index ${right}) is NOT equal to ${concat[right - left]} (at index ${right - left})`);\n        Tracer.delay();\n        concatTracer.depatch(right);\n        concatTracer.deselect(right - left);\n      }\n      // }\n      z[i] = (right - left);\n      right--;\n      // logger {\n      logger.println('--------------------------------');\n      logger.println(`Value of z[${i}] = the length of the substring starting from ${i} which is also the prefix of the concatinated string(=${right - left})`);\n      logger.println('--------------------------------');\n      // }\n    }\n    // visualize {\n    tracer.deselect(i);\n    tracer.set(z);\n    // }\n  }\n}\n\nconst concat = `${pattern}$${text}`;\n// visualize {\nconcatTracer.set(concat);\n// }\nconst patLen = pattern.length;\ncreateZarr(concat);\n// visualize {\ntracer.set(z);\n// }\n// logger {\nlogger.println('The Values in Z array equal to the length of the pattern indicates the index at which the pattern is present');\nlogger.println('===================================');\nfor (let i = 0; i < len; i++) {\n  if (z[i] === patLen) {\n    const pos = i - (patLen + 1);\n    logger.println(`Pattern Found at index ${pos}`);\n  }\n}\nlogger.println('===================================');\n// }\n",
  "category": "searching",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "has_logging"
  ]
}