{
  "name": "Kruskal's Minimum Spanning Tree",
  "path": "Greedy/Kruskal's Minimum Spanning Tree/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, GraphTracer, LogTracer, Randomize, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n// define tracer variables {\nconst tracer = new GraphTracer().directed(false).weighted();\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([tracer, logger]));\n/* let G = [ // G[i][j] indicates the weight of the path from the i-th node to the j-th node\n [0, 3, 0, 1, 0],\n [5, 0, 1, 2, 4],\n [1, 0, 0, 2, 0],\n [0, 2, 0, 0, 1],\n [0, 1, 3, 0, 0]\n ]; */\nconst G = Randomize.Graph({ N: 5, ratio: 1, directed: false, weighted: true });\ntracer.set(G);\nTracer.delay();\n// }\n\nfunction kruskal() {\n  const vcount = G.length;\n\n  // Preprocess: sort edges by weight.\n  const edges = [];\n  for (let vi = 0; vi < vcount - 1; vi++) {\n    for (let vj = vi + 1; vj < vcount; vj++) {\n      edges.push({\n        0: vi,\n        1: vj,\n        weight: G[vi][vj],\n      });\n    }\n  }\n  edges.sort((ei, ej) => ei.weight - ej.weight);\n\n  // Give each vertex a tree to decide if they are already in the same tree.\n  const t = [];\n  for (let i = 0; i < vcount; i++) {\n    t[i] = {};\n    t[i][i] = true;\n  }\n\n  let wsum = 0;\n  for (let n = 0; n < vcount - 1 && edges.length > 0;) {\n    const e = edges.shift(); // Get the edge of min weight\n    // visualize {\n    tracer.visit(e[0], e[1]);\n    Tracer.delay();\n    // }\n    if (t[e[0]] === t[e[1]]) {\n      // e[0] & e[1] already in the same tree, ignore\n      // visualize {\n      tracer.leave(e[0], e[1]);\n      Tracer.delay();\n      // }\n      continue;\n    }\n\n    // Choose the current edge.\n    wsum += e.weight;\n\n    // Merge tree of e[0] & e[1]\n    const tmerged = {};\n    for (const i in t[e[0]]) tmerged[i] = true;\n    for (const i in t[e[1]]) tmerged[i] = true;\n    for (const i in tmerged) t[i] = tmerged;\n\n    n += 1;\n  }\n\n  // logger {\n  logger.println(`The sum of all edges is: ${wsum}`);\n  // }\n}\n\nkruskal();\n",
  "category": "graph",
  "patterns": [
    "uses_randomize",
    "has_logging"
  ]
}