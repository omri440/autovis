{
  "name": "Bubble Sort",
  "path": "Brute Force/Bubble Sort/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, ChartTracer, LogTracer, Randomize, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n// define tracer variables {\nconst chart = new ChartTracer();\nconst tracer = new Array1DTracer();\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([chart, tracer, logger]));\nconst D = Randomize.Array1D({ N: 15 });\ntracer.set(D);\ntracer.chart(chart);\nTracer.delay();\n// }\n\n// logger {\nlogger.println(`original array = [${D.join(', ')}]`);\n// }\nlet N = D.length;\nlet swapped;\ndo {\n  swapped = false;\n  // visualize {\n  tracer.select(N - 1);\n  Tracer.delay();\n  // }\n  for (let i = 1; i < N; i++) {\n    // visualize {\n    tracer.select(i);\n    Tracer.delay();\n    // }\n    if (D[i - 1] > D[i]) {\n      // logger {\n      logger.println(`swap ${D[i - 1]} and ${D[i]}`);\n      // }\n      const temp = D[i - 1];\n      D[i - 1] = D[i];\n      D[i] = temp;\n      swapped = true;\n      // visualize {\n      tracer.patch(i - 1, D[i - 1]);\n      tracer.patch(i, D[i]);\n      Tracer.delay();\n      tracer.depatch(i - 1);\n      tracer.depatch(i);\n      // }\n    }\n    // visualize {\n    tracer.deselect(i);\n    // }\n  }\n  // visualize {\n  tracer.deselect(N - 1);\n  // }\n  N--;\n} while (swapped);\n// logger {\nlogger.println(`sorted array = [${D.join(', ')}]`);\n// }\n",
  "category": "sorting",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "uses_randomize",
    "has_logging",
    "uses_chart"
  ]
}