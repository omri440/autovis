{
  "name": "Affine Cipher",
  "path": "Uncategorized/Affine Cipher/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst plainText = 'secret';\n\n// define tracer variables {\nconst ptTracer = new Array1DTracer('Encryption');\nconst ctTracer = new Array1DTracer('Decryption');\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([ptTracer, ctTracer, logger]));\n\nptTracer.set(plainText);\nTracer.delay();\n// }\n\n/*\n code assumes that plainText contains ONLY LOWER CASE ALPHABETS\n */\n\nNumber.prototype.mod = function (n) {\n  return ((this % n) + n) % n;\n};\n\nconst keys = { a: 5, b: 7 };\nconst N = 26;\n\nfunction encrypt(plainText) {\n  let cypherText = '';\n\n  function cryptAlpha(alpha) {\n    const index = alpha.charCodeAt(0) - 'a'.charCodeAt(0);\n    let result = ((keys.a * index) + keys.b).mod(N);\n\n    // logger {\n    logger.println(`Index of ${alpha} = ${index}`);\n    // }\n\n    result += 'a'.charCodeAt(0);\n    return String.fromCharCode(result);\n  }\n\n  // logger {\n  logger.println('Beginning Affine Encryption');\n  logger.println('Encryption formula: <b>((keys.a * indexOfAlphabet) + keys.b) % N</b>');\n  logger.println(`keys.a=${keys.a}, keys.b=${keys.b}, N=${N}`);\n  // }\n\n  for (const i in plainText) {\n    // visualize {\n    ptTracer.select(i);\n    Tracer.delay();\n    ptTracer.deselect(i);\n    // }\n\n    cypherText += cryptAlpha(plainText[i]);\n\n    // visualize {\n    ptTracer.patch(i, cypherText.slice(-1));\n    Tracer.delay();\n    ptTracer.depatch(i);\n    // }\n  }\n\n  return cypherText;\n}\n\nfunction decrypt(cypherText) {\n  let plainText = '';\n  const aInverse = ((() => {\n    for (let i = 1; i < N; i++) {\n      if (((keys.a * i).mod(N)) === 1) {\n        return i;\n      }\n    }\n  })());\n\n  // logger {\n  logger.println(`a<sup>-1</sup> = ${aInverse}`);\n  // }\n\n  function decryptAlpha(alpha) {\n    const index = alpha.charCodeAt(0) - 'a'.charCodeAt(0);\n    let result = (aInverse * (index - keys.b)).mod(N);\n\n    // logger {\n    logger.println(`Index of ${alpha} = ${index}`);\n    // }\n\n    result += 'a'.charCodeAt(0);\n    return String.fromCharCode(result);\n  }\n\n  // logger {\n  logger.println('Beginning Affine Decryption');\n  logger.println('Decryption formula: <b>(a<sup>-1</sup> * (index - keys.b)) % N</b>');\n  logger.println(`keys.b=${keys.b}, N=${N}`);\n  // }\n\n  for (const i in cypherText) {\n    // visualize {\n    ctTracer.select(i);\n    Tracer.delay();\n    ctTracer.deselect(i);\n    Tracer.delay();\n    // }\n\n    plainText += decryptAlpha(cypherText[i]);\n\n    // visualize {\n    ctTracer.patch(i, plainText.slice(-1));\n    Tracer.delay();\n    ctTracer.depatch(i);\n    Tracer.delay();\n    // }\n  }\n\n  return plainText;\n}\n\nconst cipherText = encrypt(plainText);\nctTracer.set(cipherText);\ndecrypt(cipherText);\n",
  "category": "other",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "has_logging"
  ]
}