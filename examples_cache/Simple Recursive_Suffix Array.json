{
  "name": "Suffix Array",
  "path": "Simple Recursive/Suffix Array/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, Array2DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nlet word = 'virgo';\nconst suffixArray = (function skeleton(word) {\n  const arr = [];\n\n  for (let i = 1; i <= word.length + 1; i++) {\n    arr.push([i, '-']);\n  }\n\n  return arr;\n}(word));\n\n// define tracer variables {\nconst saTracer = new Array2DTracer('Suffix Array');\nconst wordTracer = new Array1DTracer('Given Word');\nconst logger = new LogTracer('Progress');\nLayout.setRoot(new VerticalLayout([saTracer, wordTracer, logger]));\n\nsaTracer.set(suffixArray);\nwordTracer.set(word);\nTracer.delay();\n// }\n\nword += '$'; // special character\n// logger {\nlogger.println('Appended \\'$\\' at the end of word as terminating (special) character. Beginning filling of suffixes');\n// }\n\nfunction selectSuffix(word, i) {\n  let c = i;\n\n  while (i < word.length - 1) {\n    // visualize {\n    wordTracer.select(i);\n    // }\n    i++;\n  }\n  // visualize {\n  Tracer.delay();\n  // }\n\n  while (c < word.length - 1) {\n    // visualize {\n    wordTracer.deselect(c);\n    // }\n    c++;\n  }\n  // visualize {\n  Tracer.delay();\n  // }\n}\n\n(function createSA(sa, word) {\n  for (let i = 0; i < word.length; i++) {\n    sa[i][1] = word.slice(i);\n\n    selectSuffix(word, i);\n    // visualize {\n    saTracer.patch(i, 1, sa[i][1]);\n    Tracer.delay();\n    saTracer.depatch(i, 1);\n    Tracer.delay();\n    // }\n  }\n}(suffixArray, word));\n\n// logger {\nlogger.println('Re-organizing Suffix Array in sorted order of suffixes using efficient sorting algorithm (O(N.log(N)))');\n// }\nsuffixArray.sort((a, b) => {\n  // logger {\n  logger.println(`The condition a [1] (${a[1]}) > b [1] (${b[1]}) is ${a[1] > b[1]}`);\n  // }\n  return a[1] > b[1];\n});\n\n// visualize {\nfor (let i = 0; i < word.length; i++) {\n  saTracer.patch(i, 0, suffixArray[i][0]);\n  saTracer.patch(i, 1, suffixArray[i][1]);\n  Tracer.delay();\n\n  saTracer.depatch(i, 0);\n  saTracer.depatch(i, 1);\n}\n// }\n",
  "category": "other",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "custom_data",
    "has_logging",
    "uses_2d_array"
  ]
}