{
  "name": "Knight's Tour Problem",
  "path": "Backtracking/Knight's Tour Problem/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, Array2DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n/*\nFor N>3 the time taken by this algorithm is sufficiently high\nAlso it is not possible to visualise for N>6 due to stack overflow\ncaused by large number of recursive calls\n*/\nconst N = 3;\nconst board = new Array(N);\nfor (let i = board.length - 1; i >= 0; i--) {\n  board[i] = new Array(N);\n}\n\nfor (let i = board.length - 1; i >= 0; i--) {\n  for (let j = board[i].length - 1; j >= 0; j--) {\n    board[i][j] = -1;\n  }\n}\n\n/*\nDefine the next move of the knight\n*/\nconst X = [2, 1, -1, -2, -2, -1, 1, 2];\nconst Y = [1, 2, 2, 1, -1, -2, -2, -1];\n\nconst pos = new Array(2);\npos[0] = pos[1] = -1;\n\n// define tracer variables {\nconst boardTracer = new Array2DTracer('Board');\nconst posTracer = new Array1DTracer('Knight Position');\nconst logTracer = new LogTracer('Console');\nboardTracer.set(board);\nposTracer.set(pos);\nLayout.setRoot(new VerticalLayout([boardTracer, posTracer, logTracer]));\nTracer.delay();\n// }\n\nfunction knightTour(x, y, moveNum) {\n  if (moveNum === N * N) {\n    return true;\n  }\n\n  for (let i = 0; i < 8; i++) {\n    const nextX = x + X[i];\n    const nextY = y + Y[i];\n\n    // visualize {\n    posTracer.patch(0, nextX);\n    Tracer.delay();\n    posTracer.patch(1, nextY);\n    Tracer.delay();\n    posTracer.depatch(0);\n    posTracer.depatch(1);\n    // }\n    /*\n    Check if knight is still in the board\n    Check that knight does not visit an already visited square\n    */\n    if (nextX >= 0 && nextX < N && nextY >= 0 && nextY < N && board[nextX][nextY] === -1) {\n      board[nextX][nextY] = moveNum;\n\n      // visualize {\n      logTracer.println(`Move to ${nextX},${nextY}`);\n      boardTracer.patch(nextX, nextY, moveNum);\n      Tracer.delay();\n      boardTracer.depatch(nextX, nextY);\n      boardTracer.select(nextX, nextY);\n      // }\n\n      const nextMoveNum = moveNum + 1;\n      if (knightTour(nextX, nextY, nextMoveNum) === true) {\n        return true;\n      }\n\n      // logger {\n      logTracer.println(`No place to move from ${nextX},${nextY}: Backtrack`);\n      // }\n      board[nextX][nextY] = -1; // backtrack\n      // visualize {\n      boardTracer.patch(nextX, nextY, -1);\n      Tracer.delay();\n      boardTracer.depatch(nextX, nextY);\n      boardTracer.deselect(nextX, nextY);\n      // }\n    } else {\n      // logger {\n      logTracer.println(`${nextX},${nextY} is not a valid move`);\n      // }\n    }\n  }\n  return false;\n}\n\nboard[0][0] = 0; // start from this position\npos[0] = 0;\npos[0] = 0;\n\n// visualize {\nboardTracer.patch(0, 0, 0);\nTracer.delay();\nposTracer.patch(0, 0);\nTracer.delay();\nposTracer.patch(1, 0);\nTracer.delay();\nboardTracer.depatch(0, 0);\nboardTracer.depatch(0, 0);\nposTracer.depatch(0);\nposTracer.depatch(1);\n// }\n\n// logger {\nif (knightTour(0, 0, 1) === false) {\n  logTracer.println('Solution does not exist');\n} else {\n  logTracer.println('Solution found');\n}\n// }\n",
  "category": "backtracking",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "custom_data",
    "uses_2d_array"
  ]
}