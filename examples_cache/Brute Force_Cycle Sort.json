{
  "name": "Cycle Sort",
  "path": "Brute Force/Cycle Sort/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, ChartTracer, LogTracer, Randomize, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n// define tracer variables {\nconst chart = new ChartTracer();\nconst tracer = new Array1DTracer();\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([chart, tracer, logger]));\nconst D = Randomize.Array1D({ N: 15 });\ntracer.set(D);\ntracer.chart(chart);\nTracer.delay();\n// }\n\n// logger {\nlogger.println(`original array = [${D.join(', ')}]`);\n// }\nconst N = D.length;\nlet writes = 0; // number of writing performed\nlet pos; // the index of item in the sorted array\nlet item; // an item in the array\nlet temp; // a temp value used for storing swapped item\nfor (let cycleStart = 0; cycleStart <= N - 2; cycleStart++) {\n  item = D[cycleStart];\n\n  // find where to put the item\n  pos = cycleStart;\n  // visualize {\n  tracer.select(cycleStart);\n  // }\n\n  for (let i = cycleStart + 1; i <= N - 1; i++) {\n    // visualize {\n    tracer.select(i);\n    Tracer.delay();\n    tracer.deselect(i);\n    // }\n    if (D[i] < item) {\n      pos++;\n    }\n  }\n\n  // if the item is already there, this is not a circle\n  if (pos === cycleStart) {\n    // visualize {\n    tracer.deselect(cycleStart);\n    // }\n    continue;\n  }\n\n  // otherwise put the item there or right after any duplicates\n  while (item === D[pos]) {\n    pos++;\n  }\n\n  // write item to new index and increment writes\n  temp = D[pos];\n  D[pos] = item;\n  item = temp;\n\n  writes++;\n\n  // logger {\n  if (pos !== cycleStart) {\n    logger.println(`Rewrite ${D[pos]} to index ${pos}; the next value to rewrite is ${item}`);\n  } else {\n    logger.println(`Rewrite ${D[pos]} to index ${pos}`);\n  }\n  // }\n  // visualize {\n  tracer.select(pos);\n  Tracer.delay();\n  tracer.deselect(pos);\n  tracer.patch(pos, D[pos]);\n  tracer.patch(cycleStart, D[cycleStart]);\n  Tracer.delay();\n  tracer.depatch(pos);\n  tracer.depatch(cycleStart);\n  // }\n\n  // rotate the rest of the cycle\n  while (pos !== cycleStart) {\n    pos = cycleStart;\n\n    for (let i = cycleStart + 1; i <= N - 1; i++) {\n      // visualize {\n      tracer.select(i);\n      Tracer.delay();\n      tracer.deselect(i);\n      // }\n      if (D[i] < item) {\n        pos++;\n      }\n    }\n\n    while (item === D[pos]) {\n      pos++;\n    }\n\n    temp = D[pos];\n    D[pos] = item;\n    item = temp;\n\n    // logger {\n    if (pos !== cycleStart) {\n      logger.println(`Rewrite ${D[pos]} to index ${pos}; the next value to rewrite is ${item}`);\n    } else {\n      logger.println(`Rewrite ${D[pos]} to index ${pos}`);\n    }\n    // }\n    // visualize {\n    tracer.select(pos);\n    Tracer.delay();\n    tracer.deselect(pos);\n    tracer.patch(pos, D[pos]);\n    tracer.patch(cycleStart, D[cycleStart]);\n    Tracer.delay();\n    tracer.depatch(pos);\n    tracer.depatch(cycleStart);\n    // }\n\n    writes++;\n  }\n}\n\n// logger {\nlogger.println(`Number of writes performed is ${writes}`);\n// }\n",
  "category": "sorting",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "uses_randomize",
    "has_logging",
    "uses_chart"
  ]
}