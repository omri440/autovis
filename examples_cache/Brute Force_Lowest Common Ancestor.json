{
  "name": "Lowest Common Ancestor",
  "path": "Brute Force/Lowest Common Ancestor/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, GraphTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst G = [ // G[i][j] indicates whether the path from the i-th node to the j-th node exists or not\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],\n  [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n];\n\nconst T = [ // mapping to G as a binary tree , [i][0] indicates left child, [i][1] indicates right child\n  [-1, -1],\n  [-1, 7],\n  [-1, -1],\n  [6, 1],\n  [-1, -1],\n  [3, 8],\n  [0, 2],\n  [-1, -1],\n  [10, 4],\n  [-1, -1],\n  [9, -1],\n];\n\n// define tracer variables {\nconst treeTracer = new GraphTracer(' Traversal Pre-order ');\nconst logger = new LogTracer(' Log ');\nLayout.setRoot(new VerticalLayout([treeTracer, logger]));\ntreeTracer.set(G);\ntreeTracer.layoutTree(5);\nTracer.delay();\n// }\n\nfunction lcaBT(parent, root, a, b) {\n  // logger {\n  logger.println(`Beginning new Iteration of lcaBT () with parent: ${parent}, current root: ${root}`);\n  // }\n  if (root === -1) {\n    // logger {\n    logger.println('Reached end of path & target node(s) not found');\n    // }\n    return null;\n  }\n\n  // visualize {\n  if (parent !== null) treeTracer.visit(root, parent);\n  else treeTracer.visit(root);\n  Tracer.delay();\n  // visualize {\n\n  if (root === a || root === b) return root;\n\n  const left = lcaBT(root, T[root][0], a, b);\n  const right = lcaBT(root, T[root][1], a, b);\n\n  if (left !== null && right !== null) return root;\n  if (left === null && right === null) {\n    // visualize {\n    treeTracer.leave(root, parent);\n    Tracer.delay();\n    // }\n  }\n\n  return (left !== null ? left : right);\n}\n\nconst a = 7;\nconst b = 2;\n// logger {\nlogger.println(`Lowest common ancestor of ${a} & ${b} is: ${lcaBT(null, 5, a, b)}`);\n// }\n",
  "category": "other",
  "patterns": [
    "custom_data",
    "has_logging"
  ]
}