{
  "name": "Insertion Sort",
  "path": "Brute Force/Insertion Sort/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, ChartTracer, LogTracer, Randomize, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n// define tracer variables {\nconst chart = new ChartTracer();\nconst tracer = new Array1DTracer();\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([chart, tracer, logger]));\nconst D = Randomize.Array1D({ N: 15 });\ntracer.set(D);\ntracer.chart(chart);\nTracer.delay();\n// }\n\n// logger {\nlogger.println(`original array = [${D.join(', ')}]`);\n// }\nfor (let i = 1; i < D.length; i++) {\n  const key = D[i];\n  // visualize {\n  logger.println(`insert ${key}`);\n  tracer.select(i);\n  Tracer.delay();\n  // }\n  let j;\n  for (j = i - 1; (j >= 0) && (D[j] > key); j--) {\n    D[j + 1] = D[j];\n    // visualize {\n    tracer.patch(j + 1, D[j + 1]);\n    Tracer.delay();\n    tracer.depatch(j + 1);\n    // }\n  }\n  D[j + 1] = key;\n  // visualize {\n  tracer.patch(j + 1, D[j + 1]);\n  Tracer.delay();\n  tracer.depatch(j + 1);\n  tracer.deselect(i);\n  // }\n}\n// logger {\nlogger.println(`sorted array = [${D.join(', ')}]`);\n// }\n",
  "category": "sorting",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "uses_randomize",
    "has_logging",
    "uses_chart"
  ]
}