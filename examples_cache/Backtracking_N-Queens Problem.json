{
  "name": "N-Queens Problem",
  "path": "Backtracking/N-Queens Problem/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array2DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst N = 4; // just change the value of N and the visuals will reflect the configuration!\nconst board = (function createArray(N) {\n  const result = [];\n  for (let i = 0; i < N; i++) {\n    result[i] = Array(...Array(N)).map(Number.prototype.valueOf, 0);\n  }\n  return result;\n}(N));\nconst queens = (function qSetup(N) {\n  const result = [];\n  for (let i = 0; i < N; i++) {\n    result[i] = [-1, -1];\n  }\n  return result;\n}(N));\n\n// define tracer variables {\nconst boardTracer = new Array2DTracer('Board');\nconst queenTracer = new Array2DTracer('Queen Positions');\nconst logger = new LogTracer('Progress');\nLayout.setRoot(new VerticalLayout([boardTracer, queenTracer, logger]));\n\nboardTracer.set(board);\nqueenTracer.set(queens);\nlogger.println(`N Queens: ${N}X${N}matrix, ${N} queens`);\nTracer.delay();\n// }\n\nfunction validState(row, col, currentQueen) {\n  for (let q = 0; q < currentQueen; q++) {\n    const currentQ = queens[q];\n    if (row === currentQ[0] || col === currentQ[1] || (Math.abs(currentQ[0] - row) === Math.abs(currentQ[1] - col))) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction nQ(currentQueen, currentCol) {\n  // logger {\n  logger.println(`Starting new iteration of nQueens () with currentQueen = ${currentQueen} & currentCol = ${currentCol}`);\n  logger.println('------------------------------------------------------------------');\n  // }\n  if (currentQueen >= N) {\n    // logger {\n    logger.println('The recursion has BOTTOMED OUT. All queens have been placed successfully');\n    // }\n    return true;\n  }\n\n  let found = false;\n  let row = 0;\n  while ((row < N) && (!found)) {\n    // visualize {\n    boardTracer.select(row, currentCol);\n    Tracer.delay();\n    logger.println(`Trying queen ${currentQueen} at row ${row} & col ${currentCol}`);\n    // }\n    \n    if (validState(row, currentCol, currentQueen)) {\n      queens[currentQueen][0] = row;\n      queens[currentQueen][1] = currentCol;\n\n      // visualize {\n      queenTracer.patch(currentQueen, 0, row);\n      Tracer.delay();\n      queenTracer.patch(currentQueen, 1, currentCol);\n      Tracer.delay();\n      queenTracer.depatch(currentQueen, 0);\n      Tracer.delay();\n      queenTracer.depatch(currentQueen, 1);\n      Tracer.delay();\n      // }\n      \n      found = nQ(currentQueen + 1, currentCol + 1);\n    }\n\n    if (!found) {\n      // visualize {\n      boardTracer.deselect(row, currentCol);\n      Tracer.delay();\n      logger.println(`row ${row} & col ${currentCol} didn't work out. Going down`);\n      // }\n    }\n    row++;\n  }\n\n  return found;\n}\n\n// logger {\nlogger.println('Starting execution');\n// }\nnQ(0, 0);\n// logger {\nlogger.println('DONE');\n// }\n",
  "category": "backtracking",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "custom_data",
    "has_logging",
    "uses_2d_array"
  ]
}