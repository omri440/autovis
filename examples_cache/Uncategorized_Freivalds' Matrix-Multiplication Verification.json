{
  "name": "Freivalds' Matrix-Multiplication Verification",
  "path": "Uncategorized/Freivalds' Matrix-Multiplication Verification/code.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array1DTracer, Array2DTracer, LogTracer, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\nconst A = [[2, 3], [3, 4]];\nconst B = [[1, 0], [1, 2]];\nconst C = [[6, 5], [8, 7]];\n\n// define tracer variables {\nconst matrixATracer = new Array2DTracer('Matrix A');\nconst matrixBTracer = new Array2DTracer('Matrix B');\nconst matrixCTracer = new Array2DTracer('Matrix C');\nconst randomVectorTracer = new Array1DTracer('Random Vector');\nconst resultVectorTracer = new Array1DTracer('Result Vector');\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([matrixATracer, matrixBTracer, matrixCTracer, randomVectorTracer, resultVectorTracer, logger]));\nmatrixATracer.set(A);\nmatrixBTracer.set(B);\nmatrixCTracer.set(C);\nTracer.delay();\n// }\n\nfunction FreivaldsAlgorithm() {\n  let k = 5;\n  let i;\n  let j;\n  let tmp;\n  let tmpB;\n  let tmpC;\n  const n = A.length;\n\n  while (k--) {\n    // logger {\n    logger.println(`Iterations remained: #${k}`);\n    // }\n\n    // Generate random vector\n    const r = [];\n\n    let P = [];\n    for (i = 0; i < n; i++) {\n      P.push(-1);\n      r.push((Math.random() < 0.5) << 0);\n    }\n    // visualize {\n    randomVectorTracer.set(r);\n    Tracer.delay();\n    // }\n\n    // Compute Br, Cr\n    const Br = [];\n\n    const Cr = [];\n    for (i = 0; i < n; i++) {\n      tmpB = 0;\n      tmpC = 0;\n      for (j = 0; j < n; j++) {\n        tmpB += r[j] * B[j][i];\n        tmpC += r[j] * C[j][i];\n      }\n      Br.push(tmpB);\n      Cr.push(tmpC);\n    }\n\n    // Compute A * Br - Cr\n    P = [];\n    for (i = 0; i < n; i++) {\n      tmp = 0;\n      for (j = 0; j < n; j++) {\n        tmp += (A[i][j] * Br[i]) - Cr[i];\n      }\n      P.push(tmp);\n    }\n    // visualize {\n    resultVectorTracer.set(P);\n    Tracer.delay();\n    // }\n\n    for (i = 0; i < n; i++) {\n      if (P[i] !== 0) {\n        // logger {\n        logger.println(`P[${i}] !== 0 (${P[i]}), exit`);\n        // }\n        return false;\n      }\n    }\n\n    // logger {\n    logger.println('Result vector is identity, continue...');\n    // }\n  }\n\n  return true;\n}\n\nFreivaldsAlgorithm();\n",
  "category": "other",
  "patterns": [
    "custom_data",
    "has_logging",
    "uses_2d_array"
  ]
}