{
  "name": "Radix Sort",
  "path": "Divide and Conquer/Radix Sort/leastSignificantDigit.js",
  "code": "// import visualization libraries {\nconst { Tracer, Array2DTracer, LogTracer, Randomize, Layout, VerticalLayout } = require('algorithm-visualizer');\n// }\n\n// define tracer variables {\nconst tracer = new Array2DTracer();\nconst logger = new LogTracer();\nLayout.setRoot(new VerticalLayout([tracer, logger]));\nconst k = Randomize.Array1D({ N: 10, value: () => Randomize.Integer({ min: 1, max: 999 }) });\nconst D = [\n  k,\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n];\ntracer.set(D);\nTracer.delay();\n// }\n\n// logger {\nlogger.println(`original array = [${D[0].join(', ')}]`);\n// }\n\nfunction pow(base, expo) {\n  let ans = 1;\n  for (let i = 0; i < expo; i++) {\n    ans *= base;\n  }\n  return ans;\n}\n\nfunction digit(i, exp) {\n  return parseInt(D[0][i] / pow(10, exp) % 10);\n}\n\nfor (let exp = 0; exp < 3; exp++) {\n  // logger {\n  logger.println(`Digit: ${exp}`);\n  // }\n  let i;\n  for (i = 0; i < D[0].length; i++) {\n    const d = digit(i, exp);\n    // visualize {\n    tracer.select(0, i);\n    Tracer.delay();\n    // }\n    D[2][d] += 1;\n    // visualize {\n    tracer.patch(2, d, D[2][d]);\n    Tracer.delay();\n    tracer.depatch(2, d);\n    tracer.deselect(0, i);\n    // }\n  }\n  for (i = 1; i < 10; i++) {\n    // visualize {\n    tracer.select(2, i - 1);\n    Tracer.delay();\n    // }\n    D[2][i] += D[2][i - 1];\n    // visualize {\n    tracer.patch(2, i, D[2][i]);\n    Tracer.delay();\n    tracer.depatch(2, i);\n    tracer.deselect(2, i - 1);\n    // }\n  }\n  for (i = D[0].length - 1; i >= 0; i--) {\n    const d = digit(i, exp);\n    // visualize {\n    tracer.select(0, i);\n    Tracer.delay();\n    // }\n    D[2][d] -= 1;\n    // visualize {\n    tracer.patch(2, d, D[2][d]);\n    Tracer.delay();\n    tracer.depatch(2, d);\n    // }\n    D[1][D[2][d]] = D[0][i];\n    // visualize {\n    tracer.patch(1, D[2][d], D[1][D[2][d]]);\n    Tracer.delay();\n    tracer.depatch(1, D[2][d]);\n    tracer.deselect(0, i);\n    // }\n  }\n  for (i = 0; i < D[0].length; i++) {\n    // visualize {\n    tracer.select(1, i);\n    Tracer.delay();\n    // }\n    D[0][i] = D[1][i];\n    // visualize {\n    tracer.patch(0, i, D[0][i]);\n    Tracer.delay();\n    tracer.depatch(0, i);\n    tracer.deselect(1, i);\n    // }\n  }\n  for (i = 0; i < 10; i++) {\n    D[2][i] = 0;\n    // visualize {\n    tracer.patch(2, i, D[2][i]);\n    Tracer.delay();\n    tracer.depatch(2, i);\n    // }\n  }\n}\n// logger {\nlogger.println(`sorted array = [${D[0].join(', ')}]`);\n// }\n",
  "category": "sorting",
  "patterns": [
    "select_deselect",
    "patch_depatch",
    "uses_randomize",
    "has_logging",
    "uses_2d_array"
  ]
}